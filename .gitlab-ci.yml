stages:
  - setup
  - vet
  - test
  - build

.vet-tools: &vet-tools
  image: grauwoelfchen/rust-vet-tools:nightly
  except:
    - tags

.build-env: &build-env
  image: grauwoelfchen/rust:nightly
  before_script:
    # /usr/include/postgresql is symlink to postgresql-11
    - if [ ! -d ".postgresql" ]; then
        USE="readline ssl zlib server" emerge -v dev-db/postgresql:11;
        cp -R /usr/include/postgresql/ .postgresql;
      else
        cp -R .postgresql /usr/include/postgresql;
      fi
    - rustc --version
    - cargo --version
    - mkdir -p .git/hooks
    - if [ ! -d "vendor" ]; then
        cargo install cargo-vendor;
        mkdir -p .cargo;
        cargo vendor > .cargo/vendor;
      fi
  cache:
    key: ${CI_JOB_STAGE}-${CARGO_LOCK_CHECKSUM}
    paths:
      - .postgresql
      - .cargo
      - vendor

update:
  stage: setup
  image: grauwoelfchen/rust-vet-tools:nightly
  variables:
    GITLAB_COM: https://gitlab.com/api/v4
    PROJECT_ID: 4765963
    API_HEADER: "PRIVATE-TOKEN: ${PRIVATE_TOKEN}"
  script:
    - curl --version
    - export VALUE=$(md5sum Cargo.lock | awk '{print $1}') &&
      curl --request PUT --header "${API_HEADER}"
      "${GITLAB_COM}/projects/${PROJECT_ID}/variables/CARGO_LOCK_CHECKSUM"
      --form "value=${VALUE}"

check:
  stage: vet
  <<: *vet-tools
  before_script:
    - rustc --version
    - cargo --version
    - mkdir -p .git/hooks
  script:
    - make vet:check

format:
  stage: vet
  <<: *vet-tools
  before_script:
    - rustc --version
    - cargo --version
    - cargo fmt --version
    - mkdir -p .git/hooks
  script:
    - make vet:format

lint:
  stage: vet
  <<: *vet-tools
  before_script:
    # /usr/include/postgresql is symlink to postgresql-11
    - if [ ! -d ".postgresql" ]; then
        USE="readline ssl zlib server" emerge -v dev-db/postgresql:11;
        cp -R /usr/include/postgresql/ .postgresql;
      else
        cp -R .postgresql /usr/include/postgresql;
      fi
    - rustc --version
    - cargo --version
    - cargo clippy --version
    - mkdir -p .git/hooks
    - if [ ! -d "vendor" ]; then
        cargo install cargo-vendor;
        mkdir -p .cargo;
        cargo vendor > .cargo/vendor;
      fi
  script:
    - make vet:lint
  cache:
    key: ${CI_JOB_STAGE}-${CARGO_LOCK_CHECKSUM}
    paths:
      - .postgresql
      - .cargo
      - vendor

test:
  stage: test
  <<: *vet-tools
  before_script:
    # /usr/include/postgresql is symlink to postgresql-11
    - if [ ! -d ".postgresql" ]; then
        USE="readline ssl zlib server" emerge -v dev-db/postgresql:11;
        cp -R /usr/include/postgresql/ .postgresql;
      else
        cp -R .postgresql /usr/include/postgresql;
      fi
    - rustc --version
    - cargo --version
    - kcov --version
    - mkdir -p .git/hooks
    - if [ ! -d "vendor" ]; then
        cargo install cargo-vendor;
        mkdir -p .cargo;
        cargo vendor > .cargo/vendor;
      fi
  script:
    - KCOV_PATH=/usr/bin/kcov make coverage
  after_script:
    - cat target/coverage/index.json
  cache:
    key: ${CI_JOB_STAGE}-${CARGO_LOCK_CHECKSUM}
    paths:
      - .postgresql
      - .cargo
      - vendor

build-debug:
  stage: build
  <<: *build-env
  script:
    - make build:debug
  only:
    - master

build-release:
  stage: build
  <<: *build-env
  script:
    - make build:release
  only:
    - tags
