stages:
  - vet
  - test
  - build

.vet-tools: &vet-tools
  image: grauwoelfchen/rust-vet-tools:nightly
  except:
    - tags

.build-env: &build-env
  image: grauwoelfchen/rust:nightly
  before_script:
    - if [ ! -d "/usr/lib64/postgresql" ]; then
        USE="nls readline ssl zlib" emerge -v dev-db/postgresql;
      fi
    - psql --version
    - rustc --version
    - cargo --version
    - mkdir -p .git/hooks
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - /usr/lib64/postgresql

check:
  stage: vet
  <<: *vet-tools
  before_script:
    - rustc --version
    - cargo --version
    - mkdir -p .git/hooks
  script:
    - make vet:check

format:
  stage: vet
  <<: *vet-tools
  before_script:
    - rustc --version
    - cargo --version
    - cargo fmt --version
    - mkdir -p .git/hooks
  script:
    - make vet:format

lint:
  stage: vet
  <<: *vet-tools
  before_script:
    - rustc --version
    - cargo --version
    - cargo clippy --version
    - mkdir -p .git/hooks
  script:
    - make vet:lint

test:
  stage: test
  <<: *vet-tools
  before_script:
    - if [ ! -d "/usr/lib64/postgresql" ]; then
        USE="nls readline ssl zlib" emerge -v dev-db/postgresql;
      fi
    - psql --version
    - rustc --version
    - cargo --version
    - kcov --version
    - mkdir -p .git/hooks
  script:
    # test & get covered
    - KCOV_PATH=/usr/bin/kcov make coverage
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - /usr/lib64/postgresql
  after_script:
    - cat target/coverage/index.json

build:
  stage: build
  <<: *build-env
  script:
    - make build:debug
  only:
    - master

release:
  stage: build
  <<: *build-env
  script:
    - make build:release
  only:
    - tags
