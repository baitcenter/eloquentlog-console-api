stages:
  - setup
  - verify
  - test
  - build

.postgresql:
  - &postgresql
    # /usr/include/postgresql is symlink to postgresql-11
    if [ ! -d ".postgresql" ]; then
      USE="readline ssl zlib uuid -perl -python" emerge -v dev-db/postgresql:11;
      mkdir .postgresql;
      cp -R /usr/include/postgresql-11/ .postgresql/include;
      cp -R /usr/lib64/postgresql-11/ .postgresql/lib;
      cp -R /usr/share/postgresql-11/ .postgresql/share;
      cp -R /usr/bin/psql .postgresql/psql;
    else
      cp -R .postgresql/psql /usr/bin/psql;
      cp -R .postgresql/share/ /usr/share/postgresql-11;
      cp -R .postgresql/include/ /usr/include/postgresql-11;
      ln -s /usr/include/postgresql /usr/include/postgresql-11;
      ln -s /usr/include/libpq /usr/include/postgresql-11/libpq;
      cp -R .postgresql/lib/ /usr/lib64/postgresql-11;
      ln -s /usr/lib64/postgresql /usr/lib64/postgresql-11/lib64;
      ln -s /usr/lib64/postgresql-11/lib64/libecpg_compat.so /usr/lib64/libecpg_compat.so;
      ln -s /usr/lib64/postgresql-11/lib64/libecpg.so /usr/lib64/libecpg.so;
      ln -s /usr/lib64/postgresql-11/lib64/libpgtypes.so /usr/lib64/libpgtypes.so;
      ln -s /usr/lib64/postgresql-11/lib64/libpq.so /usr/lib64/libpq.so;
      ln -s /usr/lib64/postgresql-11/lib64/libpq.so.5 /usr/lib64/libpq.so.5;
      rm -fr /etc/ld.so.cache;
      ldconfig;
    fi

.vendor:
  - &vendor
    make setup:tool;
    if [ ! -d "vendor" ]; then
      make setup:vendor;
    fi

.cache: &cache
  cache:
    key: ${CARGO_LOCK_CHECKSUM}
    paths:
      - .postgresql
      - .cargo
      - vendor

.vet-tools: &vet-tools
  image: grauwoelfchen/rust-vet-tools:nightly
  except:
    - tags

.rust: &rust
  image: grauwoelfchen/rust:nightly
  before_script:
    - *postgresql
    - rustc --version
    - cargo --version
    - *vendor
  <<: *cache

setup-checksum:
  stage: setup
  image: grauwoelfchen/rust-vet-tools:nightly
  variables:
    GITLAB_COM: https://gitlab.com/api/v4
    PROJECT_ID: 4765963
    API_HEADER: "PRIVATE-TOKEN: ${PRIVATE_TOKEN}"
  script:
    - curl --version
    - export VALUE=$(md5sum Cargo.lock | awk '{print $1}') &&
      curl --request PUT --header "${API_HEADER}"
      "${GITLAB_COM}/projects/${PROJECT_ID}/variables/CARGO_LOCK_CHECKSUM"
      --form "value=${VALUE}"

check:
  stage: verify
  <<: *vet-tools
  before_script:
    - rustc --version
    - cargo --version
  script:
    - make verify:check

format:
  stage: verify
  <<: *vet-tools
  before_script:
    - rustc --version
    - cargo --version
    - cargo fmt --version
  script:
    - make verify:format

lint:
  stage: verify
  <<: *vet-tools
  before_script:
    - *postgresql
    - rustc --version
    - cargo --version
    - cargo clippy --version
    - *vendor
  script:
    - make verify:lint
  <<: *cache

test:
  stage: test
  <<: *vet-tools
  services:
    - postgres:11.2
    - redis:5.0
  variables:
    ENV: test
    # superuser
    POSTGRES_DB: eloquentlog_test
    POSTGRES_USER: eloquentlog
    POSTGRES_PASSWORD: eloquentlog
    TEST_DATABASE_URL: "postgresql://eloquentlog:eloquentlog@postgres:5432/eloquentlog_test"
    TEST_QUEUE_URL: "redis://redis:6379/0"
    TEST_JWT_ISSUER: "issuer"
    TEST_JWT_KEY_ID: "key_id"
    TEST_JWT_SECRET: "secret"
  before_script:
    - *postgresql
    - rustc --version
    - cargo --version
    - kcov --version
    - *vendor
    - psql $TEST_DATABASE_URL -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\""
    - DATABASE_URL=$TEST_DATABASE_URL make schema:migration:commit
    - DATABASE_URL=$TEST_DATABASE_URL make schema:migration:status
  script:
    - KCOV_PATH=/usr/bin/kcov make coverage
  after_script:
    - cat target/coverage/index.json
  <<: *cache

build-debug:
  stage: build
  <<: *rust
  script:
    - make build:debug
  only:
    - master

build-release:
  stage: build
  <<: *rust
  script:
    - make build:release
  only:
    - tags
